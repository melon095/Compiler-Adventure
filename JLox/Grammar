program        → declaration* EOF ;

declaration    → fnDecl
               | letDecl
			   | statement ;

statement      → exprStmt
               | forStmt
               | ifStmt
               | returnStmt
               | whileStmt
               | block ;

fnDecl         → "fn" function ;
function       → IDENTIFIER "(" parameters? ")" block ;

letDecl	       → "let" "mut"? IDENTIFIER ( "=" expression )? ";" ;

ifStmt         → "if" expression statement ( "else" statement )?
               | "if" expression "do:" statement ( "else:" statement )?

exprStmt 	   → expression ";" ;
whileStmt      → "while" expression statement ;
returnStmt	   → "return" expression? ";" ;

forStmt        → "for" "(" ( letDecl | exprStmt | ";" )
			    expression? ";"
			    expression? ")" statement ;  

block		   → "{" declaration* "}" ;

expression     → assignment ;
assignment     → IDENTIFIER "=" assignment
			   | logic_or ;

logic_or       → logic_and ( "or" logic_and )* ;
logic_and      → equality ( "and" equality )* ;

equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           → factor ( ( "-" | "+" | "++" | "--" ) factor )* ;
factor         → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary
               | call ;
call           → primary ( "(" arguments? ")" )* ;
arguments      → expression ( "," expression )* ;

primary        -> "true" | "false" | "nil" 
               | "NUMBER" | "STRING" 
               | "(" expression ")"
               | IDENTIFIER ;

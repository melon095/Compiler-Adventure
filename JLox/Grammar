program        → declaration* EOF ;

declaration    → letDecl
			   | statement ;

statement      → exprStmt
               | ifStmt
               | printStmt 
               | block ;

letDecl	       → "let" "mut"? IDENTIFIER ( "=" expression )? ";" ;

ifStmt         → "if" expression statement ( "else" statement )?
               | "if" expression "do:" statement ( "else:" statement )?

exprStmt 	   → expression ";" ;
printStmt      → "print" expression ";" ;

block		  → "{" declaration* "}" ;

expression     → assignment ;
assignment     → IDENTIFIER "=" assignment
			   | equality ;

equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           → factor ( ( "-" | "+" ) factor )* ;
factor         → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary
               | primary ;

primary        -> "true" | "false" | "nil" 
               | "NUMBER" | "STRING" 
               | "(" expression ")"
               | IDENTIFIER ;

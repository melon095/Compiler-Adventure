fn MakeBreakfast(a, b, c)
{
	print("Making breakfast!");
	print(a);
	print(b);
	print(c);

	return 0;
}

print(MakeBreakfast("eggs", "bacon", "toast"));

fn xP() {
	return "xP";
}

print(xP());

fn identity(a) {
	return a;
}

print(identity(0) == 0);
print(identity(1) == 1);
print(identity(nil) == nil);

fn ParentScope()
{
	let a = 1;

	fn ChildScope()
	{
		let b = 2;

		fn GrandChildScope()
		{
			let c = 3;

			print(a);
			print(b);
			print(c);
			$StackLog(MAX_NUMBER);
		}

		print(b);
		GrandChildScope();
	}

	ChildScope();
}

let fnBind = ParentScope;

fnBind();

// Not allowed as a already is defined
/*
fn Scope(a)
{
	let a = "xp";
}

let a = "1";
Scope(a);
print(a);
*/

// Same here. Not allowed as a already is defined
/*
fn Bad()
{
	let a = "first";
	let a = "second";
}

Bad();
*/

// You can't return from top level scope
// return "xd";